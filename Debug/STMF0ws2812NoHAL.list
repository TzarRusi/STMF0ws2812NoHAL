
STMF0ws2812NoHAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000894  08000894  00010894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008a4  080008a4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080008a4  080008a4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008a4  080008a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008a4  080008a4  000108a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008a8  080008a8  000108a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080008ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000004  080008b0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080008b0  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009eb  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000034e  00000000  00000000  00020a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00020da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000067  00000000  00000000  00020e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008bed  00000000  00000000  00020ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d06  00000000  00000000  00029a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0002ee8c  00000000  00000000  0002a79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000160  00000000  00000000  00059628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00059788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800087c 	.word	0x0800087c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	0800087c 	.word	0x0800087c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000224:	46c0      	nop			; (mov r8, r8)
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	2300      	movs	r3, #0
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	2300      	movs	r3, #0
 8000240:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000242:	4b30      	ldr	r3, [pc, #192]	; (8000304 <SystemCoreClockUpdate+0xd8>)
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	220c      	movs	r2, #12
 8000248:	4013      	ands	r3, r2
 800024a:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	2b08      	cmp	r3, #8
 8000250:	d011      	beq.n	8000276 <SystemCoreClockUpdate+0x4a>
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	2b08      	cmp	r3, #8
 8000256:	d83f      	bhi.n	80002d8 <SystemCoreClockUpdate+0xac>
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d003      	beq.n	8000266 <SystemCoreClockUpdate+0x3a>
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	2b04      	cmp	r3, #4
 8000262:	d004      	beq.n	800026e <SystemCoreClockUpdate+0x42>
 8000264:	e038      	b.n	80002d8 <SystemCoreClockUpdate+0xac>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000266:	4b28      	ldr	r3, [pc, #160]	; (8000308 <SystemCoreClockUpdate+0xdc>)
 8000268:	4a28      	ldr	r2, [pc, #160]	; (800030c <SystemCoreClockUpdate+0xe0>)
 800026a:	601a      	str	r2, [r3, #0]
      break;
 800026c:	e038      	b.n	80002e0 <SystemCoreClockUpdate+0xb4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800026e:	4b26      	ldr	r3, [pc, #152]	; (8000308 <SystemCoreClockUpdate+0xdc>)
 8000270:	4a26      	ldr	r2, [pc, #152]	; (800030c <SystemCoreClockUpdate+0xe0>)
 8000272:	601a      	str	r2, [r3, #0]
      break;
 8000274:	e034      	b.n	80002e0 <SystemCoreClockUpdate+0xb4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000276:	4b23      	ldr	r3, [pc, #140]	; (8000304 <SystemCoreClockUpdate+0xd8>)
 8000278:	685a      	ldr	r2, [r3, #4]
 800027a:	23f0      	movs	r3, #240	; 0xf0
 800027c:	039b      	lsls	r3, r3, #14
 800027e:	4013      	ands	r3, r2
 8000280:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <SystemCoreClockUpdate+0xd8>)
 8000284:	685a      	ldr	r2, [r3, #4]
 8000286:	23c0      	movs	r3, #192	; 0xc0
 8000288:	025b      	lsls	r3, r3, #9
 800028a:	4013      	ands	r3, r2
 800028c:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	0c9b      	lsrs	r3, r3, #18
 8000292:	3302      	adds	r3, #2
 8000294:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000296:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <SystemCoreClockUpdate+0xd8>)
 8000298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800029a:	220f      	movs	r2, #15
 800029c:	4013      	ands	r3, r2
 800029e:	3301      	adds	r3, #1
 80002a0:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d10a      	bne.n	80002c2 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 80002ac:	6839      	ldr	r1, [r7, #0]
 80002ae:	4817      	ldr	r0, [pc, #92]	; (800030c <SystemCoreClockUpdate+0xe0>)
 80002b0:	f7ff ff2a 	bl	8000108 <__udivsi3>
 80002b4:	0003      	movs	r3, r0
 80002b6:	001a      	movs	r2, r3
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	435a      	muls	r2, r3
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <SystemCoreClockUpdate+0xdc>)
 80002be:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 80002c0:	e00e      	b.n	80002e0 <SystemCoreClockUpdate+0xb4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 80002c2:	6839      	ldr	r1, [r7, #0]
 80002c4:	4811      	ldr	r0, [pc, #68]	; (800030c <SystemCoreClockUpdate+0xe0>)
 80002c6:	f7ff ff1f 	bl	8000108 <__udivsi3>
 80002ca:	0003      	movs	r3, r0
 80002cc:	001a      	movs	r2, r3
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	435a      	muls	r2, r3
 80002d2:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <SystemCoreClockUpdate+0xdc>)
 80002d4:	601a      	str	r2, [r3, #0]
      break;
 80002d6:	e003      	b.n	80002e0 <SystemCoreClockUpdate+0xb4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <SystemCoreClockUpdate+0xdc>)
 80002da:	4a0c      	ldr	r2, [pc, #48]	; (800030c <SystemCoreClockUpdate+0xe0>)
 80002dc:	601a      	str	r2, [r3, #0]
      break;
 80002de:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <SystemCoreClockUpdate+0xd8>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	091b      	lsrs	r3, r3, #4
 80002e6:	220f      	movs	r2, #15
 80002e8:	4013      	ands	r3, r2
 80002ea:	4a09      	ldr	r2, [pc, #36]	; (8000310 <SystemCoreClockUpdate+0xe4>)
 80002ec:	5cd3      	ldrb	r3, [r2, r3]
 80002ee:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <SystemCoreClockUpdate+0xdc>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	40da      	lsrs	r2, r3
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <SystemCoreClockUpdate+0xdc>)
 80002fa:	601a      	str	r2, [r3, #0]
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b004      	add	sp, #16
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40021000 	.word	0x40021000
 8000308:	20000000 	.word	0x20000000
 800030c:	007a1200 	.word	0x007a1200
 8000310:	08000894 	.word	0x08000894

08000314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b7f      	cmp	r3, #127	; 0x7f
 8000328:	d828      	bhi.n	800037c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032a:	4a2f      	ldr	r2, [pc, #188]	; (80003e8 <__NVIC_SetPriority+0xd4>)
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	b25b      	sxtb	r3, r3
 8000332:	089b      	lsrs	r3, r3, #2
 8000334:	33c0      	adds	r3, #192	; 0xc0
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	589b      	ldr	r3, [r3, r2]
 800033a:	1dfa      	adds	r2, r7, #7
 800033c:	7812      	ldrb	r2, [r2, #0]
 800033e:	0011      	movs	r1, r2
 8000340:	2203      	movs	r2, #3
 8000342:	400a      	ands	r2, r1
 8000344:	00d2      	lsls	r2, r2, #3
 8000346:	21ff      	movs	r1, #255	; 0xff
 8000348:	4091      	lsls	r1, r2
 800034a:	000a      	movs	r2, r1
 800034c:	43d2      	mvns	r2, r2
 800034e:	401a      	ands	r2, r3
 8000350:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	019b      	lsls	r3, r3, #6
 8000356:	22ff      	movs	r2, #255	; 0xff
 8000358:	401a      	ands	r2, r3
 800035a:	1dfb      	adds	r3, r7, #7
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	0018      	movs	r0, r3
 8000360:	2303      	movs	r3, #3
 8000362:	4003      	ands	r3, r0
 8000364:	00db      	lsls	r3, r3, #3
 8000366:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000368:	481f      	ldr	r0, [pc, #124]	; (80003e8 <__NVIC_SetPriority+0xd4>)
 800036a:	1dfb      	adds	r3, r7, #7
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	b25b      	sxtb	r3, r3
 8000370:	089b      	lsrs	r3, r3, #2
 8000372:	430a      	orrs	r2, r1
 8000374:	33c0      	adds	r3, #192	; 0xc0
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800037a:	e031      	b.n	80003e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800037c:	4a1b      	ldr	r2, [pc, #108]	; (80003ec <__NVIC_SetPriority+0xd8>)
 800037e:	1dfb      	adds	r3, r7, #7
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	0019      	movs	r1, r3
 8000384:	230f      	movs	r3, #15
 8000386:	400b      	ands	r3, r1
 8000388:	3b08      	subs	r3, #8
 800038a:	089b      	lsrs	r3, r3, #2
 800038c:	3306      	adds	r3, #6
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	18d3      	adds	r3, r2, r3
 8000392:	3304      	adds	r3, #4
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	1dfa      	adds	r2, r7, #7
 8000398:	7812      	ldrb	r2, [r2, #0]
 800039a:	0011      	movs	r1, r2
 800039c:	2203      	movs	r2, #3
 800039e:	400a      	ands	r2, r1
 80003a0:	00d2      	lsls	r2, r2, #3
 80003a2:	21ff      	movs	r1, #255	; 0xff
 80003a4:	4091      	lsls	r1, r2
 80003a6:	000a      	movs	r2, r1
 80003a8:	43d2      	mvns	r2, r2
 80003aa:	401a      	ands	r2, r3
 80003ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	019b      	lsls	r3, r3, #6
 80003b2:	22ff      	movs	r2, #255	; 0xff
 80003b4:	401a      	ands	r2, r3
 80003b6:	1dfb      	adds	r3, r7, #7
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	0018      	movs	r0, r3
 80003bc:	2303      	movs	r3, #3
 80003be:	4003      	ands	r3, r0
 80003c0:	00db      	lsls	r3, r3, #3
 80003c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c4:	4809      	ldr	r0, [pc, #36]	; (80003ec <__NVIC_SetPriority+0xd8>)
 80003c6:	1dfb      	adds	r3, r7, #7
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	001c      	movs	r4, r3
 80003cc:	230f      	movs	r3, #15
 80003ce:	4023      	ands	r3, r4
 80003d0:	3b08      	subs	r3, #8
 80003d2:	089b      	lsrs	r3, r3, #2
 80003d4:	430a      	orrs	r2, r1
 80003d6:	3306      	adds	r3, #6
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	18c3      	adds	r3, r0, r3
 80003dc:	3304      	adds	r3, #4
 80003de:	601a      	str	r2, [r3, #0]
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b003      	add	sp, #12
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	e000e100 	.word	0xe000e100
 80003ec:	e000ed00 	.word	0xe000ed00

080003f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	1e5a      	subs	r2, r3, #1
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	045b      	lsls	r3, r3, #17
 8000400:	429a      	cmp	r2, r3
 8000402:	d301      	bcc.n	8000408 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000404:	2301      	movs	r3, #1
 8000406:	e010      	b.n	800042a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <SysTick_Config+0x44>)
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	3a01      	subs	r2, #1
 800040e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000410:	2301      	movs	r3, #1
 8000412:	425b      	negs	r3, r3
 8000414:	2103      	movs	r1, #3
 8000416:	0018      	movs	r0, r3
 8000418:	f7ff ff7c 	bl	8000314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <SysTick_Config+0x44>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <SysTick_Config+0x44>)
 8000424:	2207      	movs	r2, #7
 8000426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000428:	2300      	movs	r3, #0
}
 800042a:	0018      	movs	r0, r3
 800042c:	46bd      	mov	sp, r7
 800042e:	b002      	add	sp, #8
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	e000e010 	.word	0xe000e010

08000438 <set_led_color>:
uint8_t pwm_values[24 * leds + 1];



void set_led_color(uint8_t led, uint8_t r, uint8_t g, uint8_t b)
{
 8000438:	b5b0      	push	{r4, r5, r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	0005      	movs	r5, r0
 8000440:	000c      	movs	r4, r1
 8000442:	0010      	movs	r0, r2
 8000444:	0019      	movs	r1, r3
 8000446:	1dfb      	adds	r3, r7, #7
 8000448:	1c2a      	adds	r2, r5, #0
 800044a:	701a      	strb	r2, [r3, #0]
 800044c:	1dbb      	adds	r3, r7, #6
 800044e:	1c22      	adds	r2, r4, #0
 8000450:	701a      	strb	r2, [r3, #0]
 8000452:	1d7b      	adds	r3, r7, #5
 8000454:	1c02      	adds	r2, r0, #0
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	1c0a      	adds	r2, r1, #0
 800045c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 8; i++)
 800045e:	230f      	movs	r3, #15
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
 8000466:	e020      	b.n	80004aa <set_led_color+0x72>
		pwm_values[24*led + i] = ((r >> (7 - i)) & 1)? 36: 13;
 8000468:	1dbb      	adds	r3, r7, #6
 800046a:	781a      	ldrb	r2, [r3, #0]
 800046c:	230f      	movs	r3, #15
 800046e:	18fb      	adds	r3, r7, r3
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2107      	movs	r1, #7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	411a      	asrs	r2, r3
 8000478:	0013      	movs	r3, r2
 800047a:	2201      	movs	r2, #1
 800047c:	4013      	ands	r3, r2
 800047e:	d001      	beq.n	8000484 <set_led_color+0x4c>
 8000480:	2124      	movs	r1, #36	; 0x24
 8000482:	e000      	b.n	8000486 <set_led_color+0x4e>
 8000484:	210d      	movs	r1, #13
 8000486:	1dfb      	adds	r3, r7, #7
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	0013      	movs	r3, r2
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	189b      	adds	r3, r3, r2
 8000490:	00db      	lsls	r3, r3, #3
 8000492:	001a      	movs	r2, r3
 8000494:	200f      	movs	r0, #15
 8000496:	183b      	adds	r3, r7, r0
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	18d3      	adds	r3, r2, r3
 800049c:	4a34      	ldr	r2, [pc, #208]	; (8000570 <set_led_color+0x138>)
 800049e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++)
 80004a0:	183b      	adds	r3, r7, r0
 80004a2:	781a      	ldrb	r2, [r3, #0]
 80004a4:	183b      	adds	r3, r7, r0
 80004a6:	3201      	adds	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	220f      	movs	r2, #15
 80004ac:	18bb      	adds	r3, r7, r2
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b07      	cmp	r3, #7
 80004b2:	d9d9      	bls.n	8000468 <set_led_color+0x30>
	for (i = 0; i < 8; i++)
 80004b4:	18bb      	adds	r3, r7, r2
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
 80004ba:	e021      	b.n	8000500 <set_led_color+0xc8>
		pwm_values[24*led + 8 + i] = ((g >> (7 - i)) & 1)? 36: 13;
 80004bc:	1d7b      	adds	r3, r7, #5
 80004be:	781a      	ldrb	r2, [r3, #0]
 80004c0:	230f      	movs	r3, #15
 80004c2:	18fb      	adds	r3, r7, r3
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2107      	movs	r1, #7
 80004c8:	1acb      	subs	r3, r1, r3
 80004ca:	411a      	asrs	r2, r3
 80004cc:	0013      	movs	r3, r2
 80004ce:	2201      	movs	r2, #1
 80004d0:	4013      	ands	r3, r2
 80004d2:	d001      	beq.n	80004d8 <set_led_color+0xa0>
 80004d4:	2124      	movs	r1, #36	; 0x24
 80004d6:	e000      	b.n	80004da <set_led_color+0xa2>
 80004d8:	210d      	movs	r1, #13
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781a      	ldrb	r2, [r3, #0]
 80004de:	0013      	movs	r3, r2
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	189b      	adds	r3, r3, r2
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	3308      	adds	r3, #8
 80004e8:	001a      	movs	r2, r3
 80004ea:	200f      	movs	r0, #15
 80004ec:	183b      	adds	r3, r7, r0
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	18d3      	adds	r3, r2, r3
 80004f2:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <set_led_color+0x138>)
 80004f4:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 8; i++)
 80004f6:	183b      	adds	r3, r7, r0
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	183b      	adds	r3, r7, r0
 80004fc:	3201      	adds	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	220f      	movs	r2, #15
 8000502:	18bb      	adds	r3, r7, r2
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b07      	cmp	r3, #7
 8000508:	d9d8      	bls.n	80004bc <set_led_color+0x84>
	for (i=0; i < 8; i++)
 800050a:	18bb      	adds	r3, r7, r2
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
 8000510:	e021      	b.n	8000556 <set_led_color+0x11e>
		pwm_values[24*led + 16 + i] = ((b >> (7 - i)) & 1)? 36: 13;
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	230f      	movs	r3, #15
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2107      	movs	r1, #7
 800051e:	1acb      	subs	r3, r1, r3
 8000520:	411a      	asrs	r2, r3
 8000522:	0013      	movs	r3, r2
 8000524:	2201      	movs	r2, #1
 8000526:	4013      	ands	r3, r2
 8000528:	d001      	beq.n	800052e <set_led_color+0xf6>
 800052a:	2124      	movs	r1, #36	; 0x24
 800052c:	e000      	b.n	8000530 <set_led_color+0xf8>
 800052e:	210d      	movs	r1, #13
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	0013      	movs	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	189b      	adds	r3, r3, r2
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	3310      	adds	r3, #16
 800053e:	001a      	movs	r2, r3
 8000540:	200f      	movs	r0, #15
 8000542:	183b      	adds	r3, r7, r0
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	18d3      	adds	r3, r2, r3
 8000548:	4a09      	ldr	r2, [pc, #36]	; (8000570 <set_led_color+0x138>)
 800054a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < 8; i++)
 800054c:	183b      	adds	r3, r7, r0
 800054e:	781a      	ldrb	r2, [r3, #0]
 8000550:	183b      	adds	r3, r7, r0
 8000552:	3201      	adds	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
 8000556:	230f      	movs	r3, #15
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b07      	cmp	r3, #7
 800055e:	d9d8      	bls.n	8000512 <set_led_color+0xda>

	pwm_values[sizeof(pwm_values) / sizeof(pwm_values[0]) - 1] = 0;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <set_led_color+0x138>)
 8000562:	22c0      	movs	r2, #192	; 0xc0
 8000564:	2100      	movs	r1, #0
 8000566:	5499      	strb	r1, [r3, r2]
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b004      	add	sp, #16
 800056e:	bdb0      	pop	{r4, r5, r7, pc}
 8000570:	20000024 	.word	0x20000024

08000574 <update_ws2812>:

void update_ws2812(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	// Disable DMA
	DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 8000578:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <update_ws2812+0x3c>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <update_ws2812+0x3c>)
 800057e:	2101      	movs	r1, #1
 8000580:	438a      	bics	r2, r1
 8000582:	601a      	str	r2, [r3, #0]
	// Enable DMA clock
	RCC->AHBENR |= RCC_AHBENR_DMAEN;
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <update_ws2812+0x40>)
 8000586:	695a      	ldr	r2, [r3, #20]
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <update_ws2812+0x40>)
 800058a:	2101      	movs	r1, #1
 800058c:	430a      	orrs	r2, r1
 800058e:	615a      	str	r2, [r3, #20]
	// DMA settings
	DMA1_Channel4->CCR = DMA_CCR_PL_1 | DMA_CCR_PL_0 | DMA_CCR_PSIZE_0 | DMA_CCR_MINC | DMA_CCR_DIR;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <update_ws2812+0x3c>)
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <update_ws2812+0x44>)
 8000594:	601a      	str	r2, [r3, #0]
	//Target
	DMA1_Channel4->CPAR = (uint32_t)&TIM3->CCR1;
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <update_ws2812+0x3c>)
 8000598:	4a08      	ldr	r2, [pc, #32]	; (80005bc <update_ws2812+0x48>)
 800059a:	609a      	str	r2, [r3, #8]
	//Source
	DMA1_Channel4->CMAR = (uint32_t)pwm_values;
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <update_ws2812+0x3c>)
 800059e:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <update_ws2812+0x4c>)
 80005a0:	60da      	str	r2, [r3, #12]
	// Number of transfer
	DMA1_Channel4->CCR = DMA_CCR_EN;
 80005a2:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <update_ws2812+0x3c>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40020044 	.word	0x40020044
 80005b4:	40021000 	.word	0x40021000
 80005b8:	00003190 	.word	0x00003190
 80005bc:	40000434 	.word	0x40000434
 80005c0:	20000024 	.word	0x20000024

080005c4 <SysTick_Handler>:


//функция,включающая прерывания позволяющая делать простые задержки
void SysTick_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	time++;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <SysTick_Handler+0x14>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	4b02      	ldr	r3, [pc, #8]	; (80005d8 <SysTick_Handler+0x14>)
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000020 	.word	0x20000020

080005dc <main>:

int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	SystemInit();
 80005e0:	f7ff fe1e 	bl	8000220 <SystemInit>

	//x12 множитель для 48MHz
	RCC->CFGR &= ~(RCC_CFGR_PLLMUL_2 | RCC_CFGR_PLLMUL_0);
 80005e4:	4b79      	ldr	r3, [pc, #484]	; (80007cc <main+0x1f0>)
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	4b78      	ldr	r3, [pc, #480]	; (80007cc <main+0x1f0>)
 80005ea:	4979      	ldr	r1, [pc, #484]	; (80007d0 <main+0x1f4>)
 80005ec:	400a      	ands	r2, r1
 80005ee:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PLLMUL_3 | RCC_CFGR_PLLMUL_1;
 80005f0:	4b76      	ldr	r3, [pc, #472]	; (80007cc <main+0x1f0>)
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	4b75      	ldr	r3, [pc, #468]	; (80007cc <main+0x1f0>)
 80005f6:	21a0      	movs	r1, #160	; 0xa0
 80005f8:	0389      	lsls	r1, r1, #14
 80005fa:	430a      	orrs	r2, r1
 80005fc:	605a      	str	r2, [r3, #4]
	//Turn PLL on
	RCC->CR |= RCC_CR_PLLON;
 80005fe:	4b73      	ldr	r3, [pc, #460]	; (80007cc <main+0x1f0>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	4b72      	ldr	r3, [pc, #456]	; (80007cc <main+0x1f0>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0449      	lsls	r1, r1, #17
 8000608:	430a      	orrs	r2, r1
 800060a:	601a      	str	r2, [r3, #0]
	// Wait for it
	while(!(RCC->CR & RCC_CR_PLLRDY));
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	4b6f      	ldr	r3, [pc, #444]	; (80007cc <main+0x1f0>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	049b      	lsls	r3, r3, #18
 8000616:	4013      	ands	r3, r2
 8000618:	d0f9      	beq.n	800060e <main+0x32>

	// Select PLL as main clock
	RCC->CFGR &= ~RCC_CFGR_SW_0;
 800061a:	4b6c      	ldr	r3, [pc, #432]	; (80007cc <main+0x1f0>)
 800061c:	685a      	ldr	r2, [r3, #4]
 800061e:	4b6b      	ldr	r3, [pc, #428]	; (80007cc <main+0x1f0>)
 8000620:	2101      	movs	r1, #1
 8000622:	438a      	bics	r2, r1
 8000624:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_1;
 8000626:	4b69      	ldr	r3, [pc, #420]	; (80007cc <main+0x1f0>)
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	4b68      	ldr	r3, [pc, #416]	; (80007cc <main+0x1f0>)
 800062c:	2102      	movs	r1, #2
 800062e:	430a      	orrs	r2, r1
 8000630:	605a      	str	r2, [r3, #4]

	SystemCoreClockUpdate();
 8000632:	f7ff fdfb 	bl	800022c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000);
 8000636:	4b67      	ldr	r3, [pc, #412]	; (80007d4 <main+0x1f8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	22fa      	movs	r2, #250	; 0xfa
 800063c:	0091      	lsls	r1, r2, #2
 800063e:	0018      	movs	r0, r3
 8000640:	f7ff fd62 	bl	8000108 <__udivsi3>
 8000644:	0003      	movs	r3, r0
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff fed2 	bl	80003f0 <SysTick_Config>

	//Tim3 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800064c:	4b5f      	ldr	r3, [pc, #380]	; (80007cc <main+0x1f0>)
 800064e:	69da      	ldr	r2, [r3, #28]
 8000650:	4b5e      	ldr	r3, [pc, #376]	; (80007cc <main+0x1f0>)
 8000652:	2102      	movs	r1, #2
 8000654:	430a      	orrs	r2, r1
 8000656:	61da      	str	r2, [r3, #28]
	//Prescaler
	TIM3->PSC = 0;
 8000658:	4b5f      	ldr	r3, [pc, #380]	; (80007d8 <main+0x1fc>)
 800065a:	2200      	movs	r2, #0
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
	//Auto reload register - таймер считает до 100
	TIM3->ARR = 48;
 800065e:	4b5e      	ldr	r3, [pc, #376]	; (80007d8 <main+0x1fc>)
 8000660:	2230      	movs	r2, #48	; 0x30
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
	//На линии ос1реф, из которой сигнал идет на 1 канал записываем биты для включения шим на первом канале
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE;
 8000664:	4b5c      	ldr	r3, [pc, #368]	; (80007d8 <main+0x1fc>)
 8000666:	699a      	ldr	r2, [r3, #24]
 8000668:	4b5b      	ldr	r3, [pc, #364]	; (80007d8 <main+0x1fc>)
 800066a:	2168      	movs	r1, #104	; 0x68
 800066c:	430a      	orrs	r2, r1
 800066e:	619a      	str	r2, [r3, #24]
	//Turn on 1 channel
	TIM3->CCER |= TIM_CCER_CC1E;
 8000670:	4b59      	ldr	r3, [pc, #356]	; (80007d8 <main+0x1fc>)
 8000672:	6a1a      	ldr	r2, [r3, #32]
 8000674:	4b58      	ldr	r3, [pc, #352]	; (80007d8 <main+0x1fc>)
 8000676:	2101      	movs	r1, #1
 8000678:	430a      	orrs	r2, r1
 800067a:	621a      	str	r2, [r3, #32]
	// Enable DMA for CC1
	TIM3->DIER |= TIM_DIER_CC1DE;
 800067c:	4b56      	ldr	r3, [pc, #344]	; (80007d8 <main+0x1fc>)
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	4b55      	ldr	r3, [pc, #340]	; (80007d8 <main+0x1fc>)
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	0089      	lsls	r1, r1, #2
 8000686:	430a      	orrs	r2, r1
 8000688:	60da      	str	r2, [r3, #12]




	//НОГА МК НА РАБОТУ С ТАЙМЕРОМ GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800068a:	4b50      	ldr	r3, [pc, #320]	; (80007cc <main+0x1f0>)
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	4b4f      	ldr	r3, [pc, #316]	; (80007cc <main+0x1f0>)
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0289      	lsls	r1, r1, #10
 8000694:	430a      	orrs	r2, r1
 8000696:	615a      	str	r2, [r3, #20]
	// ПИН 6 В АЛЬТЕРНАТИВНОМ РЕЖИМЕ
	GPIOA->MODER |= GPIO_MODER_MODER6_1;
 8000698:	2390      	movs	r3, #144	; 0x90
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	2390      	movs	r3, #144	; 0x90
 80006a0:	05db      	lsls	r3, r3, #23
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	0189      	lsls	r1, r1, #6
 80006a6:	430a      	orrs	r2, r1
 80006a8:	601a      	str	r2, [r3, #0]
	//1 КАНАЛ 3 ТАЙМЕРА НАХОДИМ ПО ТАБЛИЦЕ TIM3 CH1 (AF1)
	GPIOA->AFR[0] |= 1 << (6 * 4);
 80006aa:	2390      	movs	r3, #144	; 0x90
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	6a1a      	ldr	r2, [r3, #32]
 80006b0:	2390      	movs	r3, #144	; 0x90
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	0449      	lsls	r1, r1, #17
 80006b8:	430a      	orrs	r2, r1
 80006ba:	621a      	str	r2, [r3, #32]
	//PIN 6 - HIGH SPEED
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR10_1	|	GPIO_OSPEEDR_OSPEEDR10_0;
 80006bc:	2390      	movs	r3, #144	; 0x90
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	2390      	movs	r3, #144	; 0x90
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	21c0      	movs	r1, #192	; 0xc0
 80006c8:	0389      	lsls	r1, r1, #14
 80006ca:	430a      	orrs	r2, r1
 80006cc:	609a      	str	r2, [r3, #8]


	//ЗАПУСКАЕМ ТАЙМЕР CEN = COUNTER ENABLE
	TIM3->CR1 |= TIM_CR1_CEN;
 80006ce:	4b42      	ldr	r3, [pc, #264]	; (80007d8 <main+0x1fc>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4b41      	ldr	r3, [pc, #260]	; (80007d8 <main+0x1fc>)
 80006d4:	2101      	movs	r1, #1
 80006d6:	430a      	orrs	r2, r1
 80006d8:	601a      	str	r2, [r3, #0]



   while(1)
   {
	   set_led_color(0, 0xFF, 0xFF, 0xFF);
 80006da:	23ff      	movs	r3, #255	; 0xff
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	21ff      	movs	r1, #255	; 0xff
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff fea9 	bl	8000438 <set_led_color>
	   set_led_color(0, 0xFF, 0xFF, 0xFF);
 80006e6:	23ff      	movs	r3, #255	; 0xff
 80006e8:	22ff      	movs	r2, #255	; 0xff
 80006ea:	21ff      	movs	r1, #255	; 0xff
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff fea3 	bl	8000438 <set_led_color>
	   set_led_color(2, 0, 0, 0xFF);
 80006f2:	23ff      	movs	r3, #255	; 0xff
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	2002      	movs	r0, #2
 80006fa:	f7ff fe9d 	bl	8000438 <set_led_color>
	   update_ws2812();
 80006fe:	f7ff ff39 	bl	8000574 <update_ws2812>
	   time = 0;
 8000702:	4b36      	ldr	r3, [pc, #216]	; (80007dc <main+0x200>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
	   while (time < 500);
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	4b34      	ldr	r3, [pc, #208]	; (80007dc <main+0x200>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	23fa      	movs	r3, #250	; 0xfa
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	429a      	cmp	r2, r3
 8000714:	d3f9      	bcc.n	800070a <main+0x12e>

	   set_led_color(0, 0xFF, 0, 0);
 8000716:	2300      	movs	r3, #0
 8000718:	2200      	movs	r2, #0
 800071a:	21ff      	movs	r1, #255	; 0xff
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff fe8b 	bl	8000438 <set_led_color>
	   set_led_color(1, 0, 0xFF, 0);
 8000722:	2300      	movs	r3, #0
 8000724:	22ff      	movs	r2, #255	; 0xff
 8000726:	2100      	movs	r1, #0
 8000728:	2001      	movs	r0, #1
 800072a:	f7ff fe85 	bl	8000438 <set_led_color>
	   set_led_color(2, 0, 0, 0xFF);
 800072e:	23ff      	movs	r3, #255	; 0xff
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff fe7f 	bl	8000438 <set_led_color>
	   update_ws2812();
 800073a:	f7ff ff1b 	bl	8000574 <update_ws2812>
	   time = 0;
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <main+0x200>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
	   while (time < 500);
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <main+0x200>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	23fa      	movs	r3, #250	; 0xfa
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	429a      	cmp	r2, r3
 8000750:	d3f9      	bcc.n	8000746 <main+0x16a>

	   set_led_color(1, 0xFF, 0, 0);
 8000752:	2300      	movs	r3, #0
 8000754:	2200      	movs	r2, #0
 8000756:	21ff      	movs	r1, #255	; 0xff
 8000758:	2001      	movs	r0, #1
 800075a:	f7ff fe6d 	bl	8000438 <set_led_color>
	   set_led_color(2, 0, 0xFF, 0);
 800075e:	2300      	movs	r3, #0
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	2100      	movs	r1, #0
 8000764:	2002      	movs	r0, #2
 8000766:	f7ff fe67 	bl	8000438 <set_led_color>
	   set_led_color(0, 0, 0, 0xFF);
 800076a:	23ff      	movs	r3, #255	; 0xff
 800076c:	2200      	movs	r2, #0
 800076e:	2100      	movs	r1, #0
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff fe61 	bl	8000438 <set_led_color>
	   update_ws2812();
 8000776:	f7ff fefd 	bl	8000574 <update_ws2812>
	   time = 0;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <main+0x200>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
	   while (time < 500);
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <main+0x200>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	23fa      	movs	r3, #250	; 0xfa
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	429a      	cmp	r2, r3
 800078c:	d3f9      	bcc.n	8000782 <main+0x1a6>


	   set_led_color(2, 0xFF, 0, 0);
 800078e:	2300      	movs	r3, #0
 8000790:	2200      	movs	r2, #0
 8000792:	21ff      	movs	r1, #255	; 0xff
 8000794:	2002      	movs	r0, #2
 8000796:	f7ff fe4f 	bl	8000438 <set_led_color>
	   set_led_color(0, 0, 0xFF, 0);
 800079a:	2300      	movs	r3, #0
 800079c:	22ff      	movs	r2, #255	; 0xff
 800079e:	2100      	movs	r1, #0
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fe49 	bl	8000438 <set_led_color>
	   set_led_color(1, 0, 0, 0xFF);
 80007a6:	23ff      	movs	r3, #255	; 0xff
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff fe43 	bl	8000438 <set_led_color>
	   update_ws2812();
 80007b2:	f7ff fedf 	bl	8000574 <update_ws2812>
	   time = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <main+0x200>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
	   while (time < 500);
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <main+0x200>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	23fa      	movs	r3, #250	; 0xfa
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d3f9      	bcc.n	80007be <main+0x1e2>
	   set_led_color(0, 0xFF, 0xFF, 0xFF);
 80007ca:	e786      	b.n	80006da <main+0xfe>
 80007cc:	40021000 	.word	0x40021000
 80007d0:	ffebffff 	.word	0xffebffff
 80007d4:	20000000 	.word	0x20000000
 80007d8:	40000400 	.word	0x40000400
 80007dc:	20000020 	.word	0x20000020

080007e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007e4:	f7ff fd1c 	bl	8000220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <LoopForever+0x6>)
  ldr r1, =_edata
 80007ea:	490d      	ldr	r1, [pc, #52]	; (8000820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <LoopForever+0xe>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000800:	4c0a      	ldr	r4, [pc, #40]	; (800082c <LoopForever+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800080e:	f000 f811 	bl	8000834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fee3 	bl	80005dc <main>

08000816 <LoopForever>:

LoopForever:
  b LoopForever
 8000816:	e7fe      	b.n	8000816 <LoopForever>
  ldr   r0, =_estack
 8000818:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000824:	080008ac 	.word	0x080008ac
  ldr r2, =_sbss
 8000828:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800082c:	200000e8 	.word	0x200000e8

08000830 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC_IRQHandler>
	...

08000834 <__libc_init_array>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	2600      	movs	r6, #0
 8000838:	4c0c      	ldr	r4, [pc, #48]	; (800086c <__libc_init_array+0x38>)
 800083a:	4d0d      	ldr	r5, [pc, #52]	; (8000870 <__libc_init_array+0x3c>)
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	10a4      	asrs	r4, r4, #2
 8000840:	42a6      	cmp	r6, r4
 8000842:	d109      	bne.n	8000858 <__libc_init_array+0x24>
 8000844:	2600      	movs	r6, #0
 8000846:	f000 f819 	bl	800087c <_init>
 800084a:	4c0a      	ldr	r4, [pc, #40]	; (8000874 <__libc_init_array+0x40>)
 800084c:	4d0a      	ldr	r5, [pc, #40]	; (8000878 <__libc_init_array+0x44>)
 800084e:	1b64      	subs	r4, r4, r5
 8000850:	10a4      	asrs	r4, r4, #2
 8000852:	42a6      	cmp	r6, r4
 8000854:	d105      	bne.n	8000862 <__libc_init_array+0x2e>
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	00b3      	lsls	r3, r6, #2
 800085a:	58eb      	ldr	r3, [r5, r3]
 800085c:	4798      	blx	r3
 800085e:	3601      	adds	r6, #1
 8000860:	e7ee      	b.n	8000840 <__libc_init_array+0xc>
 8000862:	00b3      	lsls	r3, r6, #2
 8000864:	58eb      	ldr	r3, [r5, r3]
 8000866:	4798      	blx	r3
 8000868:	3601      	adds	r6, #1
 800086a:	e7f2      	b.n	8000852 <__libc_init_array+0x1e>
 800086c:	080008a4 	.word	0x080008a4
 8000870:	080008a4 	.word	0x080008a4
 8000874:	080008a8 	.word	0x080008a8
 8000878:	080008a4 	.word	0x080008a4

0800087c <_init>:
 800087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000882:	bc08      	pop	{r3}
 8000884:	469e      	mov	lr, r3
 8000886:	4770      	bx	lr

08000888 <_fini>:
 8000888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800088e:	bc08      	pop	{r3}
 8000890:	469e      	mov	lr, r3
 8000892:	4770      	bx	lr
